{"version":3,"sources":["BooksAPI.js","components/Book.js","components/BookAbout.js","components/Bookshelf.js","components/SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","_ref","bulkMove","updateChecked","updateBook","bookCover","imageLinks","react_default","a","createElement","className","style","width","height","backgroundImage","thumbnail","Fragment","onChange","e","target","value","defaultValue","disabled","title","authors","Link","to","type","name","BookAbout","state","storedBooks","getItem","parse","setItem","this","props","queryString","window","location","filter","setState","bookImage","subtitle","publisher","pageCount","ratingsCount","description","onClick","open","previewLink","Component","Bookshelf","bookshelf","children","moveMultiple","updateAllShelves","SearchBooks","searchBooks","shelvedBooks","_this","BooksAPI","error","compareArrays","catch","err","console","log","arr1","arr2","forEach","e1","e2","_this2","_this$state","searchContent","keys","length","constructor","map","index","components_Book","key","placeholder","BooksApp","bookshelves","checkedBooks","currentBook","removeItem","checked","toConsumableArray","_this3","Switch","Route","exact","path","render","components_BookAbout","components_SearchBooks","components_Bookshelf","toLowerCase","split","join","React","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"8RACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAaNS,EAAS,SAACC,EAAMC,GAAP,OACpBC,MAAK,GAAAC,OAAId,EAAJ,WAAAc,OAAiBH,EAAKI,IAAM,CAC/BC,OAAQ,MACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEV,YACtBW,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERC,EAAS,SAACC,GAAD,OACpBd,MAAK,GAAAC,OAAId,EAAJ,WAAkB,CACrBgB,OAAQ,OACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEK,YACtBJ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKC,SC4BRC,EAnEF,SAAAC,GAAmD,IAAhDpB,EAAgDoB,EAAhDpB,KAAMqB,EAA0CD,EAA1CC,SAAUC,EAAgCF,EAAhCE,cAAeC,EAAiBH,EAAjBG,WACvCC,EAAYxB,EAAKyB,WACrBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAe,QAAA9B,OAAUH,EAAKyB,WAAWS,UAA1B,SAInB,GAGF,OACER,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACET,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZL,EACDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UACEQ,SAAU,SAAAC,GAAC,OAAId,EAAWc,EAAEC,OAAOC,MAAOvC,IAC1CwC,aAAcxC,EAAKC,OAAS,QAE5ByB,EAAAC,EAAAC,cAAA,UAAQW,MAAM,OAAOE,UAAQ,GAA7B,cAGAf,EAAAC,EAAAC,cAAA,UAAQW,MAAM,oBAAd,qBACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,cAAd,gBACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,QACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,WAINb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAc7B,EAAK0C,OAClChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgB7B,EAAK2C,SAAW,MAC9C3C,EAAKC,OAAwB,SAAfD,EAAKC,OAClByB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAE,YAAA1C,OAAcH,EAAKI,KACzBsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAlB,cAIHR,GACCK,EAAAC,EAAAC,cAAA,SACEkB,KAAK,WACLC,KAAK,OACL3C,GAAG,OACHgC,SAAU,kBAAMd,EAActB,EAAKI,KACnCyB,UAAU,wCC2BXmB,6MA3EbC,MAAQ,CACN/B,MAAO,GACPlB,KAAM,uFAYN,IAAMkD,EAAc3D,aAAa4D,QAAQ,SACrCjC,EAAQ,GAEPgC,EAIHhC,EAAQR,KAAK0C,MAAMF,IAHnB3D,aAAa8D,QAAQ,QAAS3C,KAAKC,UAAU2C,KAAKC,MAAMrC,QACxDA,EAAQoC,KAAKC,MAAMrC,OAKrB,IACMd,EADQoD,IAAYJ,MAAMK,OAAOC,SAAS3C,QAC/BX,GAEXJ,EADYkB,EAAMyC,OAAO,SAAA3D,GAAI,OAAIA,EAAKI,KAAOA,IAC5B,GACvBkD,KAAKM,SAAS,CAAE5D,0CAGT,IACCA,EAASsD,KAAKL,MAAdjD,KACF6D,EAAY7D,EAAKyB,WACrBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAe,QAAA9B,OAAUH,EAAKyB,WAAWS,UAA1B,SAGjB,KAEJ,OACER,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACET,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMf,UAAU,eAAegB,GAAG,KAAlC,SAGAnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZgC,EACDnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoB7B,EAAK0C,OACvChB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuB7B,EAAK8D,UAC1CpC,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAK5B,EAAK+D,YAEZrC,EAAAC,EAAAC,cAAA,SAAI5B,EAAKgE,UAAL,eAAA7D,OAAgCH,EAAKgE,WAAc,MACvDtC,EAAAC,EAAAC,cAAA,SAAI5B,EAAKiE,aAAL,WAAA9D,OAA+BH,EAAKiE,cAAiB,MACzDvC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BACV7B,EAAKkE,YAAclE,EAAKkE,YAAc,MAEzCxC,EAAAC,EAAAC,cAAA,UACEC,UAAU,gCACVsC,QAAS,kBAAMV,OAAOW,KAAKpE,EAAKqE,eAFlC,qBA/DYC,aC2CTC,EA7CG,SAAAnD,GAMZ,IALJoD,EAKIpD,EALJoD,UACAC,EAIIrD,EAJJqD,SACAC,EAGItD,EAHJsD,aACArD,EAEID,EAFJC,SACAsD,EACIvD,EADJuD,iBAEA,OACEjD,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmB2C,GACjC9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBsC,QAASO,GAA3C,aAGCrD,GACCK,EAAAC,EAAAC,cAAA,UACEC,UAAU,wBACVO,SAAU,SAAAC,GAAC,OAAIsC,EAAiBtC,EAAEC,OAAOC,QACzCC,aAAa,QAEbd,EAAAC,EAAAC,cAAA,UAAQW,MAAM,OAAOE,UAAQ,GAA7B,cAGAf,EAAAC,EAAAC,cAAA,UAAQW,MAAM,oBAAd,qBACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,cAAd,gBACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,QACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,QAAd,SAGJb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAc4C,OC+DvBG,6MAzFb3B,MAAQ,CACNjC,MAAO,GACPE,MAAO,MA+BT2D,YAAc,SAAA7D,GAAS,IACb8D,EAAiBC,EAAKxB,MAAtBuB,aACRC,EAAKnB,SAAS,CAAE5C,UAEZA,GACFgE,EAAgBhE,GACbJ,KAAK,SAAAM,GACAA,EAAM+D,MACRF,EAAKnB,SAAS,CAAE1C,MAAO,MAEvBA,EAAQ6D,EAAKG,cAAchE,EAAO4D,GAClCC,EAAKnB,SAAS,CAAE1C,aAGnBiE,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,mFA9B3BG,EAAMC,GASlB,OARAD,EAAKE,QAAQ,SAAAC,GAAE,OACbF,EAAKC,QAAQ,SAAAE,GACPD,EAAGtF,KAAOuF,EAAGvF,KACfsF,EAAGzF,MAAQ0F,EAAG1F,WAKbsF,mCAyBA,IAAAK,EAAAtC,KAAAuC,EACkBvC,KAAKL,MAAtBjC,EADD6E,EACC7E,MAAOE,EADR2E,EACQ3E,MACPK,EAAe+B,KAAKC,MAApBhC,WACJuE,EAAgB,KAQpB,OANkC,IAA9BxF,OAAOyF,KAAK7E,GAAO8E,QAAgB9E,EAAM+E,cAAgB3F,SAC3DwF,EAAgBxC,KAAKL,MAAM/B,MAAMgF,IAAI,SAAClG,EAAMmG,GAAP,OACnCzE,EAAAC,EAAAC,cAACwE,EAAD,CAAMC,IAAKF,EAAOnG,KAAMA,EAAMuB,WAAYA,OAK5CG,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,KACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMf,UAAU,eAAegB,GAAG,KAAlC,SAGAnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SACEQ,SAAU,SAAAC,GAAC,OAAIuD,EAAKf,YAAYxC,EAAEC,OAAOC,QACzCO,KAAK,OACLP,MAAOvB,EACPsF,YAAY,gCAIlB5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXb,IAAUE,EAAM+D,OAASa,aAjFdxB,aCgJXiC,oNA5IbtD,MAAQ,CACNuD,YAAa,CACX,CACE9D,MAAO,qBAET,CACEA,MAAO,gBAET,CACEA,MAAO,SAGXxB,MAAO,GACPG,UAAU,EACVoF,aAAc,MAYhBlF,WAAa,SAACtB,EAAOD,GACnB,IAAM0G,EAAc1G,EACpB0G,EAAYzG,MAAQA,EACpB+E,EAAgB0B,EAAazG,GAC7B8E,EAAKnB,SAAS,SAAAX,GAAK,MAAK,CACtB/B,MAAO+B,EAAM/B,MACVyC,OAAO,SAAA3D,GAAI,OAAIA,EAAK0C,QAAUgE,EAAYhE,QAC1CvC,OAAO,CAACuG,OAEbnH,aAAaoH,WAAW,YAM1BjC,aAAe,WACbK,EAAKnB,SAAS,SAAAX,GAAK,MAAK,CACtB5B,UAAW4B,EAAM5B,eAQrBC,cAAgB,SAAAlB,GACd,IAAMJ,EAAO+E,EAAK9B,MAAM/B,MAAMyC,OAAO,SAAA3D,GAAI,OAAIA,EAAKI,KAAOA,IACzDJ,EAAK,GAAG4G,SAAU,EAClB,IAAMH,EAAY,GAAAtG,OAAAG,OAAAuG,EAAA,EAAAvG,CAAON,GAAPM,OAAAuG,EAAA,EAAAvG,CAAgByE,EAAK9B,MAAMwD,eAC7C1B,EAAKnB,SAAS,CAAE6C,oBAOlB9B,iBAAmB,SAAApC,GACjBwC,EAAK9B,MAAMwD,aAAaP,IAAI,SAAAlG,GAAI,OAAI+E,EAAKxD,WAAWgB,EAAOvC,KAC3D+E,EAAKnB,SAAS,CAAE6C,aAAc,GAAIpF,UAAU,wFA/C1B,IAAAuE,EAAAtC,KLPpBpD,MAAK,GAAAC,OAAId,EAAJ,UAAiB,CAAEO,YACrBgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAIA,EAAKC,QKMDN,KAAK,SAAAM,GAAK,OAAI0E,EAAKhC,SAAS,CAAE1C,6CAiDzC,IAAA4F,EAAAxD,KACP,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmF,EAAA,EAAD,KACErF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,QACLC,OAAQ,kBAAMzF,EAAAC,EAAAC,cAACwF,EAAD,CAAWlG,MAAO4F,EAAK7D,MAAM/B,WAE7CQ,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,UACLC,OAAQ,kBACNzF,EAAAC,EAAAC,cAACyF,EAAD,CACEvC,aAAcgC,EAAK7D,MAAM/B,MACzBK,WAAYuF,EAAKvF,gBAIvBG,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACNzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,WACGkF,EAAK7D,MAAMuD,YAAYN,IAAI,SAAC1B,EAAW2B,GAAZ,OAC1BzE,EAAAC,EAAAC,cAAC0F,EAAD,CACEjB,IAAKF,EACL3B,UAAWA,EAAU9B,MACrBgC,aAAcoC,EAAKpC,aACnBrD,SAAUyF,EAAK7D,MAAM5B,SACrBsD,iBAAkBmC,EAAKnC,kBAEtBmC,EAAK7D,MAAM/B,MAAMgF,IAAI,SAAClG,EAAMmG,GAC3B,OACEnG,EAAKC,MAAMsH,gBACX/C,EAAU9B,MACP8E,MAAM,KACNC,KAAK,IACLF,cAGD7F,EAAAC,EAAAC,cAACwE,EAAD,CACEC,IAAKF,EACLnG,KAAMA,EACNuB,WAAYuF,EAAKvF,WACjBD,cAAewF,EAAKxF,cACpBD,SAAUyF,EAAK7D,MAAM5B,WAIpB,YAMjBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAG,WAAT,4BAlIK6E,IAAMpD,4BCH7BqD,IAASR,OACPzF,EAAAC,EAAAC,cAACgG,EAAA,EAAD,KACElG,EAAAC,EAAAC,cAACiG,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.273e366c.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Book = ({ book, bulkMove, updateChecked, updateBook }) => {\n  const bookCover = book.imageLinks ? (\n    <div\n      className=\"book-cover\"\n      style={{\n        width: 128,\n        height: 193,\n        backgroundImage: `url(\"${book.imageLinks.thumbnail}\")`\n      }}\n    />\n  ) : (\n    ''\n  );\n\n  return (\n    <React.Fragment>\n      <li>\n        <div>\n          <div className=\"book\">\n            <div className=\"book-top\">\n              {bookCover}\n              <div className=\"book-shelf-changer\">\n                <select\n                  onChange={e => updateBook(e.target.value, book)}\n                  defaultValue={book.shelf || 'none'}\n                >\n                  <option value=\"move\" disabled>\n                    Move to...\n                  </option>\n                  <option value=\"currentlyReading\">Currently Reading</option>\n                  <option value=\"wantToRead\">Want to Read</option>\n                  <option value=\"read\">Read</option>\n                  <option value=\"none\">None</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"book-title\">{book.title}</div>\n            <div className=\"book-authors\">{book.authors || null}</div>\n            {book.shelf && book.shelf !== 'none' && (\n              <Link to={`/book?id=${book.id}`}>\n                <button className=\"btn-primary\">View Book</button>\n              </Link>\n            )}\n\n            {bulkMove && (\n              <input\n                type=\"checkbox\"\n                name=\"move\"\n                id=\"move\"\n                onChange={() => updateChecked(book.id)}\n                className=\"book-checkbox\"\n              />\n            )}\n          </div>\n        </div>\n      </li>\n    </React.Fragment>\n  );\n};\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  updateBook: PropTypes.func.isRequired,\n  bulkMove: PropTypes.bool,\n  updateChecked: PropTypes.func\n};\n\nexport default Book;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\n\nclass BookAbout extends Component {\n  state = {\n    books: [],\n    book: {}\n  };\n\n  static propTypes = {\n    books: PropTypes.object.isRequired\n  };\n\n  /**\n   * @description Retrieves book from local storage (if available),\n   * and sets book state to book matching id found in URL query string.\n   */\n  componentDidMount() {\n    const storedBooks = localStorage.getItem('books');\n    let books = [];\n\n    if (!storedBooks) {\n      localStorage.setItem('books', JSON.stringify(this.props.books));\n      books = this.props.books;\n    } else {\n      books = JSON.parse(storedBooks);\n    }\n\n    const query = queryString.parse(window.location.search);\n    const id = query.id;\n    const bookArray = books.filter(book => book.id === id);\n    const book = bookArray[0];\n    this.setState({ book });\n  }\n\n  render() {\n    const { book } = this.state;\n    const bookImage = book.imageLinks ? (\n      <div\n        className=\"book-cover\"\n        style={{\n          width: 128,\n          height: 193,\n          backgroundImage: `url(\"${book.imageLinks.thumbnail}\")`\n        }}\n      />\n    ) : null;\n\n    return (\n      <React.Fragment>\n        <Link className=\"close-search\" to=\"/\">\n          Close\n        </Link>\n        <div className=\"book-about-container\">\n          {bookImage}\n          <div className=\"book-about-content\">\n            <h1 className=\"book-about-title\">{book.title}</h1>\n            <h2 className=\"book-about-subtitle\">{book.subtitle}</h2>\n            <p>\n              <em>{book.publisher}</em>\n            </p>\n            <p>{book.pageCount ? `Page count: ${book.pageCount}` : null}</p>\n            <p>{book.ratingsCount ? `Rating: ${book.ratingsCount}` : null}</p>\n            <p className=\"book-about-description\">\n              {book.description ? book.description : null}\n            </p>\n            <button\n              className=\"btn-primary btn-primary-large\"\n              onClick={() => window.open(book.previewLink)}\n            >\n              Preview\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BookAbout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Bookshelf = ({\n  bookshelf,\n  children,\n  moveMultiple,\n  bulkMove,\n  updateAllShelves\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{bookshelf}</h2>\n        <button className=\"btn-secondary\" onClick={moveMultiple}>\n          Bulk Move\n        </button>\n        {bulkMove && (\n          <select\n            className=\"bookshelf-bulk-select\"\n            onChange={e => updateAllShelves(e.target.value)}\n            defaultValue=\"none\"\n          >\n            <option value=\"move\" disabled>\n              Move to...\n            </option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        )}\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\">{children}</ol>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nBookshelf.propTypes = {\n  bookshelf: PropTypes.object.isRequired,\n  children: PropTypes.object.isRequired,\n  moveMultiple: PropTypes.func.isRequired,\n  bulkMove: PropTypes.boolean,\n  updateAllShelves: PropTypes.func.isRequired\n};\n\nexport default Bookshelf;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as BooksAPI from '../BooksAPI';\nimport Book from './Book';\n\nclass SearchBooks extends Component {\n  state = {\n    query: '',\n    books: []\n  };\n\n  static propTypes = {\n    shelvedBooks: PropTypes.array.isRequired,\n    updateBook: PropTypes.func.isRequired\n  };\n\n  /**\n   * @description Compares searched books with shelved books\n   * and sets shelf property of any matching books\n   * Credit to Sai Gowtham for code example\n   *  @link https://codeburst.io/comparison-of-two-arrays-using-javascript-3251d03877fe\n   */\n\n  compareArrays(arr1, arr2) {\n    arr1.forEach(e1 =>\n      arr2.forEach(e2 => {\n        if (e1.id === e2.id) {\n          e1.shelf = e2.shelf;\n        }\n      })\n    );\n\n    return arr1;\n  }\n\n  /**\n   * @description Retrieves books matching query\n   * @param { string } query - search query\n   */\n  searchBooks = query => {\n    const { shelvedBooks } = this.props;\n    this.setState({ query });\n\n    if (query) {\n      BooksAPI.search(query)\n        .then(books => {\n          if (books.error) {\n            this.setState({ books: {} });\n          } else {\n            books = this.compareArrays(books, shelvedBooks);\n            this.setState({ books });\n          }\n        })\n        .catch(err => console.log('error', err));\n    }\n  };\n\n  render() {\n    const { query, books } = this.state;\n    const { updateBook } = this.props;\n    let searchContent = null;\n\n    if (Object.keys(books).length !== 0 && books.constructor !== Object) {\n      searchContent = this.state.books.map((book, index) => (\n        <Book key={index} book={book} updateBook={updateBook} />\n      ));\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"search-books\">\n          <div className=\"search-books-bar\">\n            <Link className=\"close-search\" to=\"/\">\n              Close\n            </Link>\n            <div className=\"search-books-input-wrapper\">\n              <input\n                onChange={e => this.searchBooks(e.target.value)}\n                type=\"text\"\n                value={query}\n                placeholder=\"Search by title or author\"\n              />\n            </div>\n          </div>\n          <div className=\"search-books-results\">\n            <ol className=\"books-grid\">\n              {query && !books.error && searchContent}\n            </ol>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SearchBooks;\n","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport Book from './components/Book';\nimport BookAbout from './components/BookAbout';\nimport Bookshelf from './components/Bookshelf';\nimport SearchBooks from './components/SearchBooks';\nimport './App.css';\n\nclass BooksApp extends React.Component {\n  state = {\n    bookshelves: [\n      {\n        title: 'Currently Reading'\n      },\n      {\n        title: 'Want to Read'\n      },\n      {\n        title: 'Read'\n      }\n    ],\n    books: [],\n    bulkMove: false,\n    checkedBooks: []\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll().then(books => this.setState({ books }));\n  }\n\n  /**\n   * @description Updates selected book's shelf property\n   * @param { string } shelf - the new shelf the book should be located on\n   * @param { object } book - the book that needs to be updated\n   */\n  updateBook = (shelf, book) => {\n    const currentBook = book;\n    currentBook.shelf = shelf;\n    BooksAPI.update(currentBook, shelf);\n    this.setState(state => ({\n      books: state.books\n        .filter(book => book.title !== currentBook.title)\n        .concat([currentBook])\n    }));\n    localStorage.removeItem('books');\n  };\n\n  /**\n   * @description Toggles state of bulkMove\n   */\n  moveMultiple = () => {\n    this.setState(state => ({\n      bulkMove: !state.bulkMove\n    }));\n  };\n\n  /**\n   * @description Adds checked books to checkedBooks array\n   * @param { string } id - the id of the book that was checked\n   */\n  updateChecked = id => {\n    const book = this.state.books.filter(book => book.id === id);\n    book[0].checked = true;\n    const checkedBooks = [...book, ...this.state.checkedBooks];\n    this.setState({ checkedBooks });\n  };\n\n  /**\n   * @description Updates all selected book's shelf property with new shelf value\n   * @param { string } value - the name of the new shelf the books belong on\n   */\n  updateAllShelves = value => {\n    this.state.checkedBooks.map(book => this.updateBook(value, book));\n    this.setState({ checkedBooks: [], bulkMove: false });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route\n            exact\n            path=\"/book\"\n            render={() => <BookAbout books={this.state.books} />}\n          />\n          <Route\n            exact\n            path=\"/search\"\n            render={() => (\n              <SearchBooks\n                shelvedBooks={this.state.books}\n                updateBook={this.updateBook}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                  <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                  <div>\n                    {this.state.bookshelves.map((bookshelf, index) => (\n                      <Bookshelf\n                        key={index}\n                        bookshelf={bookshelf.title}\n                        moveMultiple={this.moveMultiple}\n                        bulkMove={this.state.bulkMove}\n                        updateAllShelves={this.updateAllShelves}\n                      >\n                        {this.state.books.map((book, index) => {\n                          if (\n                            book.shelf.toLowerCase() ===\n                            bookshelf.title\n                              .split(' ')\n                              .join('')\n                              .toLowerCase()\n                          ) {\n                            return (\n                              <Book\n                                key={index}\n                                book={book}\n                                updateBook={this.updateBook}\n                                updateChecked={this.updateChecked}\n                                bulkMove={this.state.bulkMove}\n                              />\n                            );\n                          }\n                          return null;\n                        })}\n                      </Bookshelf>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"open-search\">\n                  <Link to=\"/search\">Add a book</Link>\n                </div>\n              </div>\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}